/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-07 08:55:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class modify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/include/footer.jsp", Long.valueOf(1686123866646L));
    _jspx_dependants.put("/include/header.jsp", Long.valueOf(1686123774678L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- prettier-ignore -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	String loggedUserId = (String) session.getAttribute("loggedUserId");
	String loggedUserName = (String) session.getAttribute("loggedUserName");
	
	//pageContext < requset < session < applicationContext

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>Insert title here</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\" />\r\n");
      out.write("    <script src=\"js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    <script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    <header class=\"d-flex flex-wrap justify-content-center py-3 mb-4 border-bottom\">\r\n");
      out.write("      <a href=\"/\" class=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none\">\r\n");
      out.write("        wjdwo1104\r\n");
      out.write("      </a>\r\n");
      out.write("\r\n");
      out.write("      <ul class=\"nav nav-pills\">\r\n");
      out.write("      	");
  if( loggedUserId == null ) { 
      out.write("\r\n");
      out.write("        <li class=\"nav-item\"><a href=\"login-form.jsp\" class=\"nav-link\">login</a></li>\r\n");
      out.write("        <li class=\"nav-item\"><a href=\"join-form.jsp\" class=\"nav-link\">join</a></li>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("        <li class=\"nav-item\"><a href=\"logout.jsp\" class=\"nav-link\">logout</a></li>\r\n");
      out.write("        <li class=\"nav-item\"><a href=\"info.jsp\" class=\"nav-link\">이정재</a></li>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("      </ul>\r\n");
      out.write("    </header>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("<!-- prettier-ignore -->\r\n");

	//  db 접속
	
	String pLoggedUserId =  (String) session.getAttribute("loggedUserId");
	
	String driver = "oracle.jdbc.OracleDriver";
	String url = "jdbc:oracle:thin:@localhost:1521:xe";
	String id = "wjdwo1104";
	String pw = "1234";
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	String sql =  "select * from member where id = ?";
	
	Class.forName(driver);
	conn = DriverManager.getConnection(url,id,pw);
	pstmt = conn.prepareStatement(sql);
	pstmt.setString(1, pLoggedUserId);
	
	rs = pstmt.executeQuery();
	String address = null;
	String detailAddress = null;
	String zonecode = null;
	String name = null;
	String allAddress =  null;
	String extraAddress = null;
	if(rs.next()) {
		
		address = rs.getString("address");
		detailAddress = rs.getString("detailAddress");
		zonecode = rs.getString("zonecode");
		name = rs.getString("name");
		extraAddress = rs.getString("extraAddress");
		allAddress= address+ " / "+detailAddress;
	}
	if(detailAddress==null) detailAddress = "상세주소 없음";
	  
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("  <form action=\"modify-process.jsp\" method=\"post\" class=\"join\">\r\n");
      out.write("    <div class=\"container-sm\">\r\n");
      out.write("      <div class=\"row justify-content-center\">\r\n");
      out.write("        <div class=\"col-6\">\r\n");
      out.write("          <div class=\"form-floating mb-5\">\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" name=\"userId\" id=\"floatingInput\" placeholder=\"아이디를 입력해주세요\" value=");
      out.print(pLoggedUserId);
      out.write("/>\r\n");
      out.write("            <label for=\"floatingInput\">ID</label>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"form-floating mb-5\">\r\n");
      out.write("            <input type=\"password\" class=\"form-control\" name=\"userPw\" id=\"floatingPassword\" placeholder=\"Password\" />\r\n");
      out.write("            <label for=\"floatingPassword\">Password</label>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"form-floating mb-5\">\r\n");
      out.write("            <input type=\"text\" class=\"form-control\" name=\"userName\" id=\"floatingName\" placeholder=\"이름\" value=");
      out.print(name);
      out.write(" />\r\n");
      out.write("            <label for=\"floatingName\">Name</label>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("          <div class=\"input-group mb-3\">\r\n");
      out.write("            <input type=\"text\" class=\"form-control-lg\" placeholder=\"우편번호\" id=\"zonecode\" name=\"zonecode\" readonly value=");
      out.print(zonecode);
      out.write(" />\r\n");
      out.write("            <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onclick=\"searchZonecode()\">Button</button>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("          <div class=\"form-floating mb-5\">\r\n");
      out.write("            <input type=\"text\" class=\"form-control address\" name=\"userAddress\" id=\"floatingAddress\" placeholder=\"주소를 입력해주세요\" value=");
      out.print(address);
      out.write("/>\r\n");
      out.write("            <label for=\"floatingAddress\">Address</label>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"row mb-3\">\r\n");
      out.write("            <div class=\"col\">\r\n");
      out.write("              <input type=\"text\" class=\"form-control-lg detailAddress\" placeholder=\"상세주소\" aria-label=\"First name\" name=\"detailAddress\" value=");
      out.print(detailAddress);
      out.write(" />\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"col\">\r\n");
      out.write("              <input type=\"text\" class=\"form-control-lg extraAddress\" placeholder=\"참고사항\" aria-label=\"Last name\" name=\"extraAddress\" value=");
      out.print(extraAddress);
      out.write(" />\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("          <div class=\"text-center\"><button type=\"submit\" class=\"btn btn-primary btn-lg\">Join</button></div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </form>\r\n");
      out.write("   <script>\r\n");
      out.write("    function searchZonecode() {\r\n");
      out.write("      new daum.Postcode({\r\n");
      out.write("        oncomplete: function (data) {\r\n");
      out.write("          // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("          // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("          // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("          let addr = \"\"; // 주소 변수\r\n");
      out.write("          let extraAddr = \"\"; // 참고항목 변수\r\n");
      out.write("\r\n");
      out.write("          //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("          if (data.userSelectedType === \"R\") {\r\n");
      out.write("            // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("            addr = data.roadAddress;\r\n");
      out.write("          } else {\r\n");
      out.write("            // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("            addr = data.jibunAddress;\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("          // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n");
      out.write("          if (data.userSelectedType === \"R\") {\r\n");
      out.write("            // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("            // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("            if (data.bname !== \"\" && /[동|로|가]$/g.test(data.bname)) {\r\n");
      out.write("              extraAddr += data.bname;\r\n");
      out.write("            }\r\n");
      out.write("            // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("            if (data.buildingName !== \"\" && data.apartment === \"Y\") {\r\n");
      out.write("              extraAddr += extraAddr !== \"\" ? \", \" + data.buildingName : data.buildingName;\r\n");
      out.write("            }\r\n");
      out.write("            // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("            if (extraAddr !== \"\") {\r\n");
      out.write("              extraAddr = \" (\" + extraAddr + \")\";\r\n");
      out.write("            }\r\n");
      out.write("            // 조합된 참고항목을 해당 필드에 넣는다.\r\n");
      out.write("            document.querySelector(\".extraAddress\").value = extraAddr;\r\n");
      out.write("          } else {\r\n");
      out.write("            document.querySelector(\".extraAddress\").value = \"\";\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("          // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("          document.querySelector(\"#zonecode\").value = data.zonecode;\r\n");
      out.write("          document.querySelector(\".address\").value = addr;\r\n");
      out.write("          // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("          document.querySelector(\".address\").focus();\r\n");
      out.write("        },\r\n");
      out.write("      }).open();\r\n");
      out.write("    }\r\n");
      out.write("  </script>\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write(" </body>\r\n");
      out.write("</html>\r\n");
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
